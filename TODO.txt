#Next steps:
1) rewrite requests to use a similar to load_trades_over_interval mask, on the entry-to-entry basis

2) combine

First, trying to tidy up and make things make sense.
Currently separating requests methods from Binance, and testing that each of them is still working.
Later, will try to take klines methods under one umbrella, and figure out the correct generalization of transition between klines and trades (which, of course, is only possible one way. Currently thinking through possiblity of producing 1s klines and then keeping references to the base objects, for higher-level calculations later)

Immediately want to add `trades` and `klines` closures to the Market object.

Will first test the plotly_klines working, then collect_trades

I want to be able to provide (path, query_name) and have it 1) figure out Market by the last section of the provided path, 2) create reqwest::query based on the query_name and Market 3) drive it through the existing asynch threading infrastracture 4) append* data directly by index 5) having poped the successful tries, retry up to 10 times to collect all missing, then delete the loners. (Note that here we can expect all coins to be listed, since they have already been pulled once)

* In the case of individual trades it is impossible to append data. No matter what I pull, it should either be stretched to the same row-dimensionality, and then, yes, appended; either the existing data should be normalized against the pulled metric.

move requests to its separate crate.

improve request logic if needed/possible, add more stuff and handling of codes.

implement logic for requests for 1) norm volume 2) tick data

implement working solution for getting data for main-trades-log

write unit tests

write proxy carousel

write the beginning of DataScience module

Sucess! v1.0.0 is ready



#Non-blockers:
empty for now (shouldn't be this way!)


add conditional check to utils to not beep unless more than 15s spent compiling

- might be cool to add a logic for simple kvs. Would be nice to be able to cache anything with one function call. And then just uncache("my_value") and have it back in the right format.